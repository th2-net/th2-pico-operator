import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id "io.gitlab.arturbosch.detekt" version "${kotlin_detekt_version}"
    id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
    id 'java'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'maven-publish'
    id 'signing'
    id "org.owasp.dependencycheck" version "${owaspVersion}"
    id 'com.github.jk1.dependency-license-report' version "${licenseReportVersion}"
    id "de.undercouch.download" version "${downloadVersion}"
}

ext {
    kotlin_logging_version = '3.0.0'
    rabbit_amqp_version = '5.16.0'
    rabbit_http_version = '5.0.0'
    resource_model_version = '1.3.3'
    fabric_version = '6.6.2'
    junit_jupiter_version = '5.9.0'
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'application'

group = 'com.exactpro.th2'
version = release_version


repositories {
    mavenCentral()

    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
}

jar {
    enabled = true
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:4.5.0')

    implementation "commons-cli:commons-cli"
    implementation "org.apache.commons:commons-text"

    implementation "org.slf4j:slf4j-api"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl"
    implementation "org.apache.logging.log4j:log4j-core"
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'

    implementation("io.fabric8:kubernetes-client:$fabric_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    implementation "com.rabbitmq:amqp-client:${rabbit_amqp_version}"
    implementation "com.rabbitmq:http-client:${rabbit_http_version}"

    implementation("com.exactpro.th2:th2-custom-resource-model:$resource_model_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$kotlin_detekt_version")
}

dependencyCheck {
    formats=['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS=5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}


// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexus &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if(task.name == 'initializeSonatypeStagingRepository' &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexus'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

detekt {
    buildUponDefaultConfig = true
    autoCorrect = true
    config = files("$rootDir/config/detekt/detekt.yml")
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}


dependencyLocking {
    lockAllConfigurations()
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [
            new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
    ]
    renderers = [
            new JsonReportRenderer('licenses.json', false),
    ]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}